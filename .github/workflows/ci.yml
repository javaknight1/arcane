name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock pytest-xdist black flake8 mypy bandit safety

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=arcane --cov-report=xml --cov-report=html -n auto
        env:
          # Mock API keys for testing
          ANTHROPIC_API_KEY: "test-key"
          OPENAI_API_KEY: "test-key"
          GOOGLE_API_KEY: "test-key"
          NOTION_TOKEN: "test-token"
          NOTION_PARENT_PAGE_ID: "test-page-id"

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy isort bandit safety

      - name: Check code formatting with Black
        run: black --check --diff .

      - name: Check import sorting with isort
        run: isort --check-only --diff .

      - name: Lint with flake8
        run: |
          flake8 arcane/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 arcane/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type checking with mypy
        run: mypy arcane/ --ignore-missing-imports

      - name: Security check with bandit
        run: bandit -r arcane/ -f json -o bandit-report.json || true

      - name: Dependency security check
        run: safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test CLI installation
        run: |
          python -m arcane --help

      - name: Test basic CLI functionality
        run: |
          # Test help commands
          python -m arcane interactive --help

          # Test profile validation
          python -c "
          from arcane.config.profiles import ProjectProfiles
          print('Available profiles:', ProjectProfiles.get_profile_names())
          "

      - name: Test configuration loading
        run: |
          python -c "
          from arcane.config import get_config
          config = get_config()
          print('Configuration loaded successfully')
          "

      - name: Test validation system
        run: |
          python -c "
          from arcane.validation import PreferenceValidator
          validator = PreferenceValidator()
          issues = validator.validate_preferences({
              'timeline': '6-months',
              'complexity': 'moderate',
              'team_size': '2-3'
          })
          print(f'Validation test passed: {len(issues)} issues found')
          "

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools

      - name: Build package
        run: python -m build

      - name: Check package
        run: |
          pip install twine
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation files
        run: |
          # Check that all referenced docs exist
          if [ ! -f "docs/installation.md" ]; then
            echo "Missing installation.md"
            exit 1
          fi
          if [ ! -f "docs/configuration.md" ]; then
            echo "Missing configuration.md"
            exit 1
          fi
          if [ ! -f "docs/usage.md" ]; then
            echo "Missing usage.md"
            exit 1
          fi
          echo "All documentation files present"

      - name: Check for broken internal links
        run: |
          # Simple check for common markdown link patterns
          grep -r '\[.*\](.*\.md)' docs/ || echo "No internal links found"

      - name: Validate README structure
        run: |
          if ! grep -q "# ðŸ”® Arcane" README.md; then
            echo "README missing title"
            exit 1
          fi
          if ! grep -q "CLI Flag Reference" README.md; then
            echo "README missing CLI reference"
            exit 1
          fi
          echo "README structure validated"